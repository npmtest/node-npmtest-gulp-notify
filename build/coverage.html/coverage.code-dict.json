{"/home/travis/build/npmtest/node-npmtest-gulp-notify/test.js":"/* istanbul instrument in package npmtest_gulp_notify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-notify/lib.npmtest_gulp_notify.js":"/* istanbul instrument in package npmtest_gulp_notify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_notify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_notify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-notify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-notify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_notify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_notify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_notify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_notify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_notify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_notify.__dirname + '/lib.npmtest_gulp_notify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-notify/node_modules/gulp-notify/index.js":"var api = require('./lib/extra_api');\nvar through = require('through2');\n\n\"use strict\";\n\nvar disable = !!process.env.DISABLE_NOTIFIER;\n\nvar fn = function (i) { return function () { return i; }; };\nvar noopError = fn(function (err) {});\nvar noopStream = function () { return through.obj(); };\n\n// Expose plugin\nmodule.exports = disable ? noopStream : require('./lib/notify');\n\n// Expose onError behaviour\nmodule.exports.onError = disable ? noopError : api.onError;\n\n// Disable all logging\ndisable && api.logLevel(0);\n\n// Expose to set log level\nmodule.exports.logLevel = api.logLevel;\n\n// Expose to set new logger\nmodule.exports.logger = api.logger;\n\n// Syntactiv sugar\nmodule.exports.withReporter = disable ? fn(noopStream) : require('./lib/withReporter');\n","/home/travis/build/npmtest/node-npmtest-gulp-notify/node_modules/gulp-notify/lib/extra_api.js":"var through = require(\"through2\");\nvar gutil = require(\"gulp-util\");\nvar notifier = require(\"node-notifier\");\nvar report = require(\"./report\");\n\n\"use strict\";\n\n// Default log level\nvar logLevel = 2;\n\n// Default logger\nvar fnLog = gutil.log;\n\nvar logError = module.exports.logError = function (options, isError) {\n  if (!logLevel) return;\n  if (logLevel === 1 && !isError) return;\n\n  color = isError ? \"red\" : \"green\";\n  if (!gutil.colors[color]) return;\n  fnLog(gutil.colors.cyan('gulp-notify') + ':',\n           '[' + gutil.colors.blue(options.title) + ']',\n            gutil.colors[color].call(gutil.colors, options.message)\n           );\n};\n\n\n// Expose onError behaviour\nmodule.exports.onError = function (options, callback) {\n  var reporter;\n  options = options || {};\n  var templateOptions = options.templateOptions || {};\n  var callback = callback || function (err) {\n    err && logError({\n      title: \"Error running notifier\",\n      message: \"Could not send message: \" + err.message\n    }, true);\n  };\n\n  if (options.notifier) {\n    reporter = options.notifier;\n  } else {\n    if (options.host || options.appName || options.port) {\n      notifier = new notifier.Notification({\n        host: options.host || 'localhost',\n        appName: options.appName || 'gulp-notify',\n        port: options.port || '23053'\n      });\n    }\n    reporter = notifier.notify.bind(notifier);\n  }\n  return function (error) {\n    var self = this;\n    report(reporter, error, options, templateOptions, function () {\n      callback.apply(self, arguments);\n      self.emit && self.emit('end');\n    });\n  };\n};\n\n// Expose to set log level\nmodule.exports.logLevel = function (newLogLevel) {\n  if (newLogLevel === void 0) return logLevel;\n  logLevel = newLogLevel;\n};\n\n// Expose to set new logger\nmodule.exports.logger = function (newLogger) {\n  if (!newLogger) return fnLog;\n  fnLog = newLogger;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-notify/node_modules/gulp-notify/lib/report.js":"var template = require(\"lodash.template\");\nvar gutil = require(\"gulp-util\");\nvar api = require(\"./extra_api\");\nvar extend = require(\"node.extend\");\nvar path = require(\"path\");\n\n\"use strict\";\n\nvar defaults = {\n  error: {\n    icon: path.join(__dirname, '..', 'assets', 'gulp-error.png'),\n    sound: 'Frog'\n  },\n  regular: {\n    icon: path.join(__dirname, '..', 'assets', 'gulp.png')\n  }\n};\n\n\nmodule.exports = function (reporter, message, options, templateOptions, callback) {\n  var self = this;\n  callback = callback || function () {};\n  if (!reporter) return callback(new gutil.PluginError(\"gulp-notify\", \"No reporter specified.\"));\n\n  // Try/catch the only way to go to ensure catching all errors? Domains?\n  try {\n    var options = constructOptions(options, message, templateOptions);\n    if (!options) {\n      return callback();\n    }\n    api.logError(options, (message instanceof Error));\n    reporter(options, function (err) {\n      if (err) return callback(new gutil.PluginError(\"gulp-notify\", err));\n      return callback();\n    });\n  } catch (err) {\n    return callback(new gutil.PluginError(\"gulp-notify\", err));\n  }\n};\n\nfunction generate (outputData, object, title, message, subtitle, open, templateOptions) {\n  if (object instanceof Error) {\n    var titleTemplate = template(title);\n    var messageTemplate = template(message);\n    var openTemplate = template(open);\n    var subtitleTemplate = template(subtitle);\n\n    return extend(defaults.error, outputData, {\n      title: titleTemplate({\n        error: object,\n        options: templateOptions\n      }),\n      message: messageTemplate({\n        error: object,\n        options: templateOptions\n      }),\n      open: openTemplate({\n        error: object,\n        options: templateOptions\n      }),\n      subtitle: subtitleTemplate({\n        error: object,\n        options: templateOptions\n      })\n    });\n  }\n\n  return extend(defaults.regular, outputData, {\n    title: gutil.template(title, {\n      file: object,\n      options: templateOptions\n    }),\n    message: gutil.template(message, {\n      file: object,\n      options: templateOptions\n    })\n  });\n}\n\nfunction constructOptions (options, object, templateOptions) {\n  var message = object.path || object.message || object,\n      title = !(object instanceof Error) ? \"Gulp notification\" : \"Error running Gulp\",\n      open = \"\",\n      subtitle = \"\",\n      outputData = {};\n\n  if (typeof options === \"function\") {\n    message = options(object);\n    if (typeof message === \"object\") {\n      options = message;\n    }\n    if (!message) {\n      return false;\n    }\n  }\n\n  if (typeof options === \"string\") {\n    message = options;\n  }\n\n  if (typeof options === \"object\") {\n    outputData = extend(true, {}, options);\n    if (typeof outputData.title === \"function\") {\n      title = outputData.title(object);\n    } else {\n      title = outputData.title || title;\n    }\n    \n    if (typeof outputData.subtitle === \"function\") {\n      subtitle = outputData.subtitle(object);\n    } else {\n      subtitle = outputData.subtitle || subtitle;\n    }\n    \n    if (typeof outputData.open === \"function\") {\n      open = outputData.open(object);\n    } else {\n      open = outputData.open || open;\n    }\n    \n    if (typeof outputData.message === \"function\") {\n      message = outputData.message(object);\n      if (!message) {\n        return false;\n      }\n    } else {\n      message = outputData.message || message;\n    }\n  }\n  return generate(outputData, object, title, message, subtitle, open, templateOptions);\n}\n","/home/travis/build/npmtest/node-npmtest-gulp-notify/node_modules/gulp-notify/lib/notify.js":"\"use strict\";\n\nvar through = require('through2');\nvar report = require('./report');\nvar extra = require('./extra_api');\nvar notifier = require('node-notifier');\n\nmodule.exports = function (options) {\n  var reporter;\n  var lastFile = null;\n\n  options = options || {};\n  var templateOptions = options.templateOptions || {};\n\n  if (options.notifier) {\n    reporter = options.notifier;\n  } else {\n    if (options.host || options.appName || options.port) {\n      notifier = new notifier.Notification({\n        host: options.host || 'localhost',\n        appName: options.appName || 'gulp-notify',\n        port: options.port || '23053'\n      });\n    }\n    reporter = notifier.notify.bind(notifier);\n  }\n\n  function notify (file, enc, callback) {\n    var stream = this;\n\n    report(reporter, file, options, templateOptions, function (err) {\n      logError(err, stream);\n\n      if (options.emitError) {\n        stream.push(file);\n        return callback();\n      }\n    });\n\n    if (!options.emitError) {\n      stream.push(file);\n      return callback();\n    }\n  }\n\n  if (!options.onLast) {\n    return through.obj(notify);\n  }\n\n  // Only send notification on the last file.\n  return through.obj(function (file, enc, callback) {\n    lastFile = file;\n    this.push(file);\n    callback();\n  }, function (callback) {\n    var stream = this;\n\n    if (!lastFile) {\n      return callback();\n    }\n\n    report(reporter, lastFile, options, templateOptions, function (err) {\n      logError(err, stream);\n      if (options.emitError) {\n        return callback();\n      }\n    });\n\n    lastFile = null; // reset\n    if (!options.emitError) {\n      return callback();\n    }\n  });\n\n  function logError (err, stream) {\n    if (!err) return;\n\n    var isGrowl = notifier && notifier instanceof notifier.Growl;\n    var isEcon = err.message.indexOf('ECONNREFUSED') !== -1;\n    var dropMessage = isGrowl && isEcon;\n\n    if (dropMessage) {\n      return extra.logError({\n        title: 'Info',\n        message: 'No notification system installed.'\n      });\n    }\n\n    if (options.emitError) return stream.emit('error', err);\n\n    extra.logError({\n      title: 'Error in notifier',\n      message: err\n    }, true);\n  }\n};\n\nmodule.exports.on = function (event, fn) {\n  if (!notifier) return;\n  return notifier.on(event, function (notifyObject, options) {\n    return fn(options);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-notify/node_modules/gulp-notify/lib/withReporter.js":"var gutil = require(\"gulp-util\");\nvar api = require(\"./extra_api\");\nvar notify = require(\"./notify\");\n\nmodule.exports = function (reporter) {\n  if (!reporter) throw new gutil.PluginError(\"gulp-notify\", \"No custom reporter defined.\");\n\n  var inner = function (options) {\n    options = setOptions(options, reporter);\n    return notify(options);\n  };\n\n  inner.onError = function (options) {\n    options = setOptions(options, reporter);\n    return api.onError(options);\n  };\n\n  inner.logLevel = api.logLevel;\n  inner.logger = api.logger;\n\n  return inner;\n};\n\nfunction setOptions (options, reporter) {\n  options = options || {};\n\n  if (typeof options !== \"object\") {\n    options = {\n      message: options\n    };\n  }\n\n  options.notifier = reporter;\n  return options;\n}\n"}